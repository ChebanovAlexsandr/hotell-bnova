{"uid":"f8d34089d1563078","name":"test_get_plans[535-200]","fullName":"tests.test_plans.TestPlans#test_get_plans","historyId":"75596b43784b17f99ae5a6ddcc5832f0","time":{"start":1747058109870,"stop":1747058110465,"duration":595},"description":"\n    Этот набор тестов которые  проверяют:\n    1.1 Получение информации о Тарифах test_get_plans:\n        * Проверка, что тарифы содержат: id, name, description;\n        * Проверка на корректные данные о предоплате (booking_guarantee_sum,booking_guarantee_unit);\n        * Проверка полей правила отмены (cancellation_rules,cancellation_deadline)   \n        Входные данные:\n        * Передали валидный account_id;\n        * Передали пустой account_id;\n        * Передали несуществующий account_id;\n        * Передали 0 account_id.\n          ","descriptionHtml":"<pre><code>Этот набор тестов которые  проверяют:\n1.1 Получение информации о Тарифах test_get_plans:\n    * Проверка, что тарифы содержат: id, name, description;\n    * Проверка на корректные данные о предоплате (booking_guarantee_sum,booking_guarantee_unit);\n    * Проверка полей правила отмены (cancellation_rules,cancellation_deadline)   \n    Входные данные:\n    * Передали валидный account_id;\n    * Передали пустой account_id;\n    * Передали несуществующий account_id;\n    * Передали 0 account_id.\n</code></pre>\n","status":"skipped","statusMessage":"XFAIL reason: Oшибка: возвращается str вместо float\n\n_pytest.outcomes.XFailed: Oшибка: возвращается str вместо float","statusTrace":"self = <tests.test_plans.TestPlans object at 0x7f74f2962950>\napi_client = <utils.api_client.APIClient object at 0x7f74f354a290>\naccount_id = '535', expected_status = 200\n\n    @allure.story(\"Get tariff plans\")\n    @pytest.mark.parametrize(\"account_id, expected_status\", [\n        (\"535\", 200),\n        (\"\", 406),\n        (\"-1\", 404),\n        ('0', 500)\n    ])\n    def test_get_plans(self, api_client, account_id, expected_status):\n        response = api_client.get_plans(account_id)\n    \n        assert response.status_code == expected_status\n    \n        with allure.step(\"Проверка, что тарифы содержат необходимые поля\"):\n            if response.status_code == 200:\n                data = response.json()\n                for plan in data[\"plans\"]:\n                    Plan(**plan)\n    \n                    with allure.step(\"Проверка типов данных\"):\n>                       pytest.xfail(\"Oшибка: возвращается str вместо float\")\nE                       _pytest.outcomes.XFailed: Oшибка: возвращается str вместо float\n\ntests/test_plans.py:39: XFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api_client","time":{"start":1747058106601,"stop":1747058106601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Этот набор тестов которые  проверяют:\n    1.1 Получение информации о Тарифах test_get_plans:\n        * Проверка, что тарифы содержат: id, name, description;\n        * Проверка на корректные данные о предоплате (booking_guarantee_sum,booking_guarantee_unit);\n        * Проверка полей правила отмены (cancellation_rules,cancellation_deadline)   \n        Входные данные:\n        * Передали валидный account_id;\n        * Передали пустой account_id;\n        * Передали несуществующий account_id;\n        * Передали 0 account_id.\n          ","status":"skipped","statusMessage":"XFAIL reason: Oшибка: возвращается str вместо float\n\n_pytest.outcomes.XFailed: Oшибка: возвращается str вместо float","statusTrace":"self = <tests.test_plans.TestPlans object at 0x7f74f2962950>\napi_client = <utils.api_client.APIClient object at 0x7f74f354a290>\naccount_id = '535', expected_status = 200\n\n    @allure.story(\"Get tariff plans\")\n    @pytest.mark.parametrize(\"account_id, expected_status\", [\n        (\"535\", 200),\n        (\"\", 406),\n        (\"-1\", 404),\n        ('0', 500)\n    ])\n    def test_get_plans(self, api_client, account_id, expected_status):\n        response = api_client.get_plans(account_id)\n    \n        assert response.status_code == expected_status\n    \n        with allure.step(\"Проверка, что тарифы содержат необходимые поля\"):\n            if response.status_code == 200:\n                data = response.json()\n                for plan in data[\"plans\"]:\n                    Plan(**plan)\n    \n                    with allure.step(\"Проверка типов данных\"):\n>                       pytest.xfail(\"Oшибка: возвращается str вместо float\")\nE                       _pytest.outcomes.XFailed: Oшибка: возвращается str вместо float\n\ntests/test_plans.py:39: XFailed","steps":[{"name":"Проверка, что тарифы содержат необходимые поля","time":{"start":1747058110463,"stop":1747058110465,"duration":2},"status":"failed","statusMessage":"_pytest.outcomes.XFailed: Oшибка: возвращается str вместо float\n","statusTrace":"  File \"/home/runner/work/hotell-bnova/hotell-bnova/tests/test_plans.py\", line 39, in test_get_plans\n    pytest.xfail(\"Oшибка: возвращается str вместо float\")\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/outcomes.py\", line 206, in xfail\n    raise XFailed(reason)\n","steps":[{"name":"Проверка типов данных","time":{"start":1747058110464,"stop":1747058110464,"duration":0},"status":"failed","statusMessage":"_pytest.outcomes.XFailed: Oшибка: возвращается str вместо float\n","statusTrace":"  File \"/home/runner/work/hotell-bnova/hotell-bnova/tests/test_plans.py\", line 39, in test_get_plans\n    pytest.xfail(\"Oшибка: возвращается str вместо float\")\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/outcomes.py\", line 206, in xfail\n    raise XFailed(reason)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Get tariff plans"},{"name":"feature","value":"Plans API"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_plans"},{"name":"subSuite","value":"TestPlans"},{"name":"host","value":"fv-az1947-897"},{"name":"thread","value":"2395-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_plans"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"account_id","value":"'535'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"f8d34089d1563078.json","parameterValues":["'535'","200"]}